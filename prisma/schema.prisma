// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userId    String   @id @default(cuid())
    email     String   @unique
    cpf       String   @unique
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Address Address[]
    Order   Order[]
}

model Address {
    id          String   @id @default(cuid())
    street      String
    number      String
    city        String
    state       String
    zipCode     String
    userId      String
    observation String?
    user        User     @relation(fields: [userId], references: [userId])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Store {
    id          String   @id @default(cuid())
    url         String   @unique
    email       String   @unique
    password    String
    name        String
    description String
    logo        String?
    phone       String?
    color       String?
    background  String?
    street      String
    city        String
    state       String
    zipCode     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Category Category[]
    Order    Order[]
}

model Category {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    storeId     String

    store   Store     @relation(fields: [storeId], references: [id])
    Product Product[]
}

model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Float
    categoryId  String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    image       String?

    category    Category            @relation(fields: [categoryId], references: [id])
    orders      OrderProduct[]
    ingredients ProductIngredient[]
}

model Order {
    id        String   @id @default(cuid())
    userId    String
    storeId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User           @relation(fields: [userId], references: [userId])
    store    Store          @relation(fields: [storeId], references: [id])
    products OrderProduct[]
}

model OrderProduct {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    price     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Ingredient {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    products ProductIngredient[]
}

model ProductIngredient {
    id           String     @id @default(cuid())
    productId    String
    ingredientId String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    product    Product    @relation(fields: [productId], references: [id])
    ingredient Ingredient @relation(fields: [ingredientId], references: [id])
}
